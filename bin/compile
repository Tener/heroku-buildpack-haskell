#!/usr/bin/env bash
# bin/compile <build-dir> <cache-dir>

# Fail fast and fail hard.
set -eo pipefail

BUILD_DIR=$1
CACHE_DIR=$2
CABAL_DEV_SANDBOX=$FIXED_HOME/cabal-dev

. $BUILD_DIR/hooks/start.sh

echo "-----> export:"
export

echo "-----> set:"
set


if [[ $BUILDPACK_CONF_PURGE_CACHE ]]; then
    echo "-----> Cache purge requested; proceeding"
    rm -rf $CACHE_DIR
    mkdir $CACHE_DIR
fi

FIXED_HOME=/app

mkdir -p $CACHE_DIR

if [ ! -e $CACHE_DIR/ghc ]; then
  GHC_URL="http://informatik.uni-kiel.de/~sad/ghc.tar.gz"
  echo "-----> Downloading GHC"
  curl -# --max-time 120 -L "$GHC_URL" | tar xz -C $CACHE_DIR
fi

# Restore GHC registry if available
if [ -e $CACHE_DIR/dotghc ]; then
  rm -rf $FIXED_HOME/app/.ghc
  mv $CACHE_DIR/dotghc $FIXED_HOME/.ghc
fi

# Fix directory
mv $CACHE_DIR/ghc $FIXED_HOME

# Restore Cabal cache or download an empty environemt
if [ -e $CACHE_DIR/cabal ] && [ -e $CACHE_DIR/cabal/happy ];  then
  rm -rf $FIXED_HOME/.cabal
  mv $CACHE_DIR/cabal $FIXED_HOME/.cabal
elif [ ! -e $FIXED_HOME/.cabal ]; then
  CABAL_URL="http://informatik.uni-kiel.de/~sad/cabal.tar.gz"
  echo "-----> Downloading Cabal"
  curl -# --max-time 120 -L "$CABAL_URL" | tar xz -C $FIXED_HOME
fi

# Set LD_LIBRARAY_PATH and link essential libraries
mkdir -p $FIXED_HOME/usr/lib
ln -s /usr/lib/libgmp.so.3.5.2 $FIXED_HOME/usr/lib/libgmp.so
export LD_LIBRARY_PATH=$FIXED_HOME/usr/lib

# Set PATH
export PATH=$FIXED_HOME/ghc/bin:$FIXED_HOME/.cabal/bin$PATH

echo "-----> Updating Cabal"
cabal update

# Install cabal-dev
echo "-----> Installing cabal-dev"
CABAL_DEV_URL="https://github.com/Tener/haskell-heroku-build-artifacts/raw/master/arch/cabal-dev.tgz"
curl -# --max-time 120 -L "$CABAL_DEV_URL" | tar xvz
chmod +x cabal-dev
mv cabal-dev $FIXED_HOME/.cabal/bin/cabal-dev
rm -rf $FIXED_HOME/.cabal/share/cabal-dev-0.9.2
mv cabal-dev-0.9.2 $FIXED_HOME/.cabal/share/

# Install stdbuf from coreutils-8.2
STDBUF_URL="https://github.com/Tener/haskell-heroku-build-artifacts/raw/master/bare/stdbuf"
rm -f $BUILD_DIR/bin/stdbuf
curl -# --max-time 120 -L "$STDBUF_URL" --output $BUILD_DIR/bin/stdbuf
chmod +x $BUILD_DIR/bin/stdbuf

# Restore cabal-dev install database if possible... broken.
if [ -e $CACHE_DIR/cabal-dev ]; then
  echo "-----> Restored cabal-dev/ dir"
  cp -r $CACHE_DIR/cabal-dev/. $CABAL_DEV_SANDBOX
  echo "-----> ghc-pkg check"
  ghc-pkg check
  echo "-----> cabal-dev ghc-pkg check"
  cabal-dev --sandbox=$CABAL_DEV_SANDBOX ghc-pkg check
fi


echo "-----> Download & unpack .deb packages"
if [ -e $CACHE_DIR/debs-extra/usr/libs ]; then
    echo "-----> Using debs-extra from cache"
    rm -rf $BUILD_DIR/debs-extra
    mv $CACHE_DIR/debs-extra $BUILD_DIR/debs-extra
else
    getdeb() {
        PACKAGE=`echo $1 | cut -d _ -f 1`
        URI=`apt-cache show $PACKAGE | grep "Filename:" | cut -f 2 -d " " | head -n 1`
        echo DOWNLOAD: $PACKAGE http://archive.ubuntu.com/ubuntu/$URI
        curl -# -L http://archive.ubuntu.com/ubuntu/$URI --output debs/$PACKAGE.deb
        dpkg -x debs/$PACKAGE.deb $BUILD_DIR/debs-extra/
    }
     
    rm -rf debs $BUILD_DIR/debs-extra
    mkdir debs $BUILD_DIR/debs-extra
     
    for pkg in libatlas3gf-base_3.6.0-24ubuntu1_amd64.deb libatlas-base-dev_3.6.0-24ubuntu1_amd64.deb libatlas-headers_3.6.0-24ubuntu1_all.deb libblas3gf_1.2-2build1_amd64.deb libblas-dev_1.2-2build1_amd64.deb libgfortran3_4.4.3-4ubuntu5.1_amd64.deb libgsl0-dev_1.13+dfsg-1_amd64.deb libgsl0ldbl_1.13+dfsg-1_amd64.deb liblapack3gf_3.2.1-2_amd64.deb liblapack-dev_3.2.1-2_amd64.deb 
    do
        getdeb $pkg
    done
    rm -rf debs/
fi

export LD_LIBRARY_PATH=$BUILD_DIR/debs-extra/usr/lib:$LD_LIBRARY_PATH

echo "-----> Adding sdists"
cd $BUILD_DIR
cabal-dev --sandbox=$CABAL_DEV_SANDBOX add-source prepared-sdists/*

echo "-----> Release the hounds! Installing application"

. $BUILD_DIR/hooks/build.sh

cabal-dev --sandbox=$CABAL_DEV_SANDBOX install --disable-library-profiling --disable-executable-profiling --disable-shared --extra-include-dirs=$BUILD_DIR/debs-extra/usr/include --extra-lib-dirs=$BUILD_DIR/debs-extra/usr/lib

echo "-----> Caching Cabal packages & other stuff"
echo $FIXED_HOME/.ghc
shopt -s extglob
rm $FIXED_HOME/.cabal/bin/!(cabal|happy)

# `cp -r foo/. bar` means `copy CONTENTS of directory foo into bar`. 
# note that:
# `cp -r foo bar` will create bar/foo/foo if foo is already present in bar
# `cp -r foo/* bar` will omit hidden (.dot) files which simply doesn't match wildcard here
cp -r $FIXED_HOME/.cabal/. $CACHE_DIR/cabal
cp -r $FIXED_HOME/ghc/. $CACHE_DIR/ghc
cp -r $BUILD_DIR/debs-extra/. $CACHE_DIR/debs-extra
cp -r $CABAL_DEV_SANDBOX/. $CACHE_DIR/cabal-dev

echo "-----> Remove unneeded files"
find $CABAL_DEV_SANDBOX -iname "*.o" -delete
find $CABAL_DEV_SANDBOX -iname "*.a" -delete
find $CABAL_DEV_SANDBOX -iname "*.hi" -delete

#echo "-----> Remove unneeded slug dirs"
#rm -rf $FIXED_HOME/vendor/ruby* $FIXED_HOME/vendor/bundle/ruby* $FIXED_HOME/tmp/buildpacks
#mv $FIXED_HOME/.ghc $CACHE_DIR/dotghc

echo "Cache dir size:"
du -hs $CACHE_DIR
echo "Build dir size:"
du -hs $BUILD_DIR

. $BUILD_DIR/hooks/finish.sh
